/*
 * Theming your Angular Material app
 */
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$candy-app-primary: mat-palette($mat-indigo);
$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as `color` or `typography`.
$candy-app-theme: mat-light-theme((
  color: (
    primary: $candy-app-primary,
    accent: $candy-app-accent,
    warn: $candy-app-warn
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);


/*
 * Theming your custom component with Angular Material's theming system
 */
@mixin candy-text-color($config-or-theme) {
  // Extract the color configuration in case a theme has been passed.
  // This allows consumers to either pass a theme object or a color configuration.
  $config: mat-get-color-config($config-or-theme);
  // Extract the palettes you need from the theme definition.
  $primary: map-get($config, primary);
  $accent: map-get($config, accent);
  $warn: map-get($config, warn);

  // Define any styles affected by the theme.
  ._mat-text {
    &.mat-primary {
      color: mat-color($primary) !important;

      @at-root
      a#{&}:hover {
        color: mat-color($primary, darker) !important;
      }
    }
    &.mat-accent {
      color: mat-color($accent) !important;

      @at-root
      a#{&}:hover {
        color: mat-color($accent, darker) !important;
      }
    }
    &.mat-warn {
      color: mat-color($warn) !important;

      @at-root
      a#{&}:hover {
        color: mat-color($warn, darker) !important;
      }
    }
  }
}

@mixin candy-text-typography($config-or-theme) {
  // Extract the typography configuration in case a theme has been passed.
  $config: mat-get-typography-config($config-or-theme);

  ._mat-text {
    font: {
      family: mat-font-family($config, body-1);
      size: mat-font-size($config, body-1);
      weight: mat-font-weight($config, body-1);
    }
  }
}

@mixin candy-text-theme($theme) {
  // Extracts the color and typography configurations from the theme.
  $color: mat-get-color-config($theme);
  $typography: mat-get-typography-config($theme);

  // Do not generate styles if configurations for individual theming
  // systems have been explicitly set to `null`.
  @if $color != null {
    @include candy-text-color($color);
  }
  @if $typography != null {
    @include candy-text-typography($typography);
  }
}

// Include theme styles for your custom components.
@include candy-text-theme($candy-app-theme);


/*
* Customizing Angular Material component styles
* Add this to your global stylesheet after your theme setup
*/
.mat-checkbox {
  .mat-checkbox-layout .mat-checkbox-label {
    line-height: 1.5em;
  }

  .mat-checkbox-inner-container {
    margin-top: 0.15em;

    @at-root
    .mat-small#{&} {
      margin-top: 0.1em;
    }
  }
}